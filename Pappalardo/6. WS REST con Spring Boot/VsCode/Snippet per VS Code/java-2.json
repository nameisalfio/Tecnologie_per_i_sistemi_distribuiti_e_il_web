{
    "Spring JPA Entity": {
        "prefix": [
            "spring-entity"
        ],
        "body": [
            "import javax.persistence.Entity;",
            "import javax.persistence.GeneratedValue;",
            "import javax.persistence.GenerationType;",
            "import javax.persistence.Id;",
            "",
            "@Entity",
            "public class ${1:EntityName} {",
            "",
            "\t@Id",
            "\t@GeneratedValue(strategy = GenerationType.IDENTITY)",
            "\tprivate ${2:entityIdType} id;",
            "",
            "\tpublic ${1:EntityName}() {",
            "\t}",
            "",
            "\tpublic ${2:entityIdType} getId() {",
            "\t\treturn id;",
            "\t}",
            "",
            "\tpublic void setId(${2:entityIdType} id) {",
            "\t\tthis.id = id;",
            "\t}",
            "}"
        ],
        "description": "JPA entity with ID field"
    },
    "Spring Rest Repository": {
        "prefix": [
            "spring-repo"
        ],
        "body": [
            "import org.springframework.data.jpa.repository.JpaRepository;",
            "import org.springframework.stereotype.Repository;",
			"",
            "@Repository",
            "public interface ${1:EntityName}Repository extends JpaRepository<${1:EntityName}, ${2:entityIdType}>{}"
        ],
        "description": "JPA repository with REST api annotation"
    },
    "Spring CRUD Service": {
        "prefix": [
            "spring-service"
        ],
        "body": [
            "import java.util.ArrayList;",
            "import java.util.List;",
            "import java.util.Optional;",
            "",
            "import org.springframework.beans.factory.annotation.Autowired;",
            "import org.springframework.stereotype.Service;",
            "",
            "@Service",
            "public class ${1:EntityName}Service {",
            "",
            "\t@Autowired",
            "\tprivate ${1:EntityName}Repository repository;",
            "",
            "\tpublic ${1:EntityName} add${1:EntityName}(${1:EntityName} e) {",
            "\t\treturn repository.save(e);",
            "\t}",
            "",
            "\tpublic Optional<${1:EntityName}> get${1:EntityName}(${2:entityIdType} id) {",
            "\t\treturn repository.findById(id);",
            "\t}",
            "",
            "\tpublic List<${1:EntityName}> getAll${1:EntityName}s() {",
            "\t\tList<${1:EntityName}> output = new ArrayList<${1:EntityName}>();",
            "\t\trepository.findAll().forEach(output::add);",
            "\t\treturn output;",
            "\t}",
            "",
            "\tpublic ${1:EntityName} update${1:EntityName}(${1:EntityName} e) {",
            "\t\treturn repository.save(e);",
            "\t}",
            "",
            "\tpublic void delete${1:EntityName}(${1:EntityName} e) {",
            "\t\trepository.delete(e);",
            "}",
            "",
            "\tpublic void delete${1:EntityName}(${2:entityIdType} id) {",
            "\t\trepository.deleteById(id);",
            "\t}",
            "}"
        ],
        "description": "Spring service that implements the CRUD operations"
    },
    "Spring controller": {
        "prefix": "spring-ctrl",
        "body": [
            "import java.net.URI;",
            "import java.net.URISyntaxException;",
            "import java.util.List;",
            "import java.util.Optional;",
            "",
            "import javax.validation.Valid;",
            "",
            "import org.springframework.beans.factory.annotation.Autowired;",
            "import org.springframework.http.ResponseEntity;",
            "import org.springframework.web.bind.annotation.DeleteMapping;",
            "import org.springframework.web.bind.annotation.GetMapping;",
            "import org.springframework.web.bind.annotation.PathVariable;",
            "import org.springframework.web.bind.annotation.PostMapping;",
            "import org.springframework.web.bind.annotation.PutMapping;",
            "import org.springframework.web.bind.annotation.RequestBody;",
            "import org.springframework.web.bind.annotation.RequestMapping;",
            "import org.springframework.web.bind.annotation.RestController;",
            "",
            "@RestController",
            "@RequestMapping(\"/${1:resourceRootPath}\")",
            "public class ${2:EntityName}Controller {",
            "",
            "\t@Autowired",
            "\tprivate ${2:EntityName}Service service;",
            "",
            "\t@GetMapping(\"/${3:resourcePath}\")",
            "\tpublic ResponseEntity<List<${2:EntityName}>> getAll${2:EntityName}s() {",
            "\t\tList<${2:EntityName}> entityList = service.getAll${2:EntityName}s();",
            "\t\treturn ResponseEntity.ok(entityList);",
            "\t}",
            "",
            "\t@GetMapping(\"/${3:resourcePath}/{id}\")",
            "\tpublic ResponseEntity<${2:EntityName}> get${2:EntityName}(@PathVariable long id) {",
            "\t\tOptional<${2:EntityName}> entity = service.get${2:EntityName}(id);",
            "\t\tif(entity.isPresent())",
            "\t\t\treturn ResponseEntity.ok(entity.get());",
            "\t\telse",
            "\t\t\treturn ResponseEntity.notFound().build();",
            "\t}",
            "",
            "\t@PostMapping(\"/${3:resourcePath}\")",
            "\tpublic ResponseEntity<${2:EntityName}> add${2:EntityName}(@Valid @RequestBody ${2:EntityName} e) throws URISyntaxException {",
            "\t\tif (e.getId() != null) {",
            "\t\t\treturn ResponseEntity.badRequest().build();",
            "\t\t}",
            "\t\t${2:EntityName} entity = service.add${2:EntityName}(e);",
            "\t\treturn ResponseEntity.created(new URI(\"/${1:resourceRootPath}/${3:resourcePath}\" + entity.getId())).body(entity);",
            "\t}",
            "",
            "\t@PutMapping(\"/${3:resourcePath}\")",
            "\tpublic ResponseEntity<${2:EntityName}> update${2:EntityName}(@Valid @RequestBody ${2:EntityName} e) {",
            "\t\tif (e.getId() == null)",
            "\t\t\treturn ResponseEntity.notFound().build();",
            "\t\t${2:EntityName} entity = service.update${2:EntityName}(e);",
            "\t\treturn ResponseEntity.ok(entity);",
            "\t}",
            "",
            "\t@DeleteMapping(\"/${3:resourcePath}/{id}\")",
            "\tpublic ResponseEntity<Void> delete${2:EntityName}(@PathVariable long id) {",
            "\t\tif (service.get${2:EntityName}(id).isEmpty())",
            "\t\t\treturn ResponseEntity.notFound().build();",
            "",
            "\t\tservice.delete${2:EntityName}(id);",
            "\t\treturn ResponseEntity.ok().build();",
            "\t}",
            "}"
        ],
        "description": "Spring controller that depends on a Service class"
    }
}