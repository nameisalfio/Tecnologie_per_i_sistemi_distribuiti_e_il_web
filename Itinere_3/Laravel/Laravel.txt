1) Crea un progetto di Laravel

	laravel new -n app

2) Inizia lo sviluppo Laravel 

	cd app; php artisan serve;

3) Creazione di una migration

	- php artisan make:migration create_books_table

4) Modificare la migration

    Schema::create('books', function (Blueprint $table) {
        $table->string('isbn');
        $table->string('titolo');
        $table->string('autore');
        $table->decimal('prezzo', 8, 2);
        $table->timestamps();
    });

5) Avviare la migration

	- php artisan migrate
	- php artisan migrate:rollback

6) Creare un model contestualmente al controller

	- php artisan make:controller BooksController --resource --model=Book

	--> nel model:

	    protected $fillable = ['titolo', 'autore', 'prezzo'];

	--> nel controller:

		class ProductController extends Controller
		{
		    public function read()
		    {
		        return view('read', ['products' => Product::all()]);
		    }

		    public function create(Request $request)
		    {
		        Product::create($request->all());
		        return redirect('/read');
		    }

		    public function form(Request $request)
		    {
		        if ($request->input("action") === "Modifica")
		        {
		            return view('update', ['product' => (object)$request->all()]);
		        }

		        if ($request->input("action") === "Rimuovi")
		        {
		            $product = Product::find($request->input('id'));
		            $product->delete();
		        }

		        return redirect('/read');
		    }

		    public function update(Request $request)
		    {
		        $product = Product::find($request->input('id'));
		        $product->update($request->all()); // Simile alla create
		        return redirect('/read');
		    }
		}
		
7) Route

    php artisan route:list

8) Programmazione agile

	php artisan make:model Game -mcr


9)  // Nella classe Game

    public function player()
    {
        return $this->belongsTo(Player::class);
    }

    // Nella classe Player

    public function games()
    {
        return $this->hasMany(Game::class);
    }

10) Modifica le migrates

    public function up(): void
    {
        Schema::create('games', function (Blueprint $table) {
            $table->id();
            $table->string("nome");
            $table->unsignedBigInteger("player");
            $table->decimal("prezzo", 8, 2);
            $table->timestamps();
            
            $table->foreign('player')->references('id')->on('players')->onDelete('cascade');
        });
    }

    public function up(): void
    {
        Schema::create('players', function (Blueprint $table) {
            $table->id();
            $table->string("nome");
            $table->timestamps();
        });
    }

// Model

	class Game extends Model
	{
	    use HasFactory;

	    protected $fillable = ['nome', 'player_id', 'prezzo']; // Aggiungi i campi necessari

	    // Relazione con il giocatore
	    public function player()
	    {
	        return $this->belongsTo(Player::class);
	    }
	}
	****************************************
	class Player extends Model
	{
	    use HasFactory;

	    protected $fillable = ['name']; // Aggiungi i campi necessari

	    // Relazione con i giochi
	    public function games()
	    {
	        return $this->hasMany(Game::class);
	    }
	}

9) Route

	Route::resource('games', GameController::class);

	Route::resource('players', PlayerController::class);

10) Spiegazione

	Games Views:

		Index View: Mostra l'elenco di tutti i giochi.

		Path: resources/views/games/index.blade.php
		URL: /games
		Create View: Form per creare un nuovo gioco.

		Path: resources/views/games/create.blade.php
		URL: /games/create
		Show View: Mostra i dettagli di un singolo gioco.

		Path: resources/views/games/show.blade.php
		URL: /games/{game} (dove {game} è l'id del gioco)
		Edit View: Form per modificare un gioco esistente.

		Path: resources/views/games/edit.blade.php
		URL: /games/{game}/edit (dove {game} è l'id del gioco)
		Players Views:

	Index View: Mostra l'elenco di tutti i giocatori.

		Path: resources/views/players/index.blade.php
		URL: /players
		Create View: Form per creare un nuovo giocatore.

		Path: resources/views/players/create.blade.php
		URL: /players/create
		Show View: Mostra i dettagli di un singolo giocatore.

		Path: resources/views/players/show.blade.php
		URL: /players/{player} (dove {player} è l'id del giocatore)
		Edit View: Form per modificare un giocatore esistente.

		Path: resources/views/players/edit.blade.php
		URL: /players/{player}/edit (dove {player} è l'id del giocatore)